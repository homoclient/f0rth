[
    {
        "name": "fuck",
        "immediate": false,
        "payload":
###
    addi tp, tp, -4
    sw ra, 0(tp)
    addi sp, sp, -8
    la t0, str_fuck
    li t1, 5
    sw t0, 4(sp)
    sw t1, 0(sp)
    CALL_WORD word_type
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    },

    {
        "name": "rv32c_push_imm",
        "immediate": false,
        "payload":
###
# ( n -- i*x u )
    lw t6, 0(sp)
    bnez t6, rv32c_push_imm_cli
    addi sp, sp, -8
    li t0, 0xc002
    li t1, 0x1171
    li t2, 2
    sw t2, 0(sp)
    sw t1, 4(sp)
    sw t0, 8(sp)
    ret
rv32c_push_imm_cli:
    li t0, 31
    bgt t6, t0, rv32c_push_imm_addi_only
    li t0, -32
    blt t6, t0, rv32c_push_imm_addi_only
    andi t0, t6, 0x3f
    andi t1, t0, 0x20
    andi t0, t0, 0x1f
    slli t1, t1, 7
    slli t0, t0, 2
    or t0, t0, t1
    li t2, 0x4281
    or t0, t0, t2
    addi sp, sp, -12
    li t1, 3
    li t2, 0x1171
    li t3, 0xc016
    sw t1, 0(sp)
    sw t0, 4(sp)
    sw t2, 8(sp)
    sw t3, 12(sp)
    ret
rv32c_push_imm_addi_only:
    li t0, 2047
    bgt t6, t0, rv32c_push_imm_clui
    li t0, -2048
    blt t6, t0, rv32c_push_imm_clui
    li t1, 0x293
    slli t0, t6, 20
    or t0, t0, t1
    li t1, 3
    li t2, 0x1171
    li t3, 0xc016
    addi sp, sp, -12
    sw t1, 0(sp)
    sw t0, 4(sp)
    sw t2, 8(sp)
    sw t3, 12(sp)
    ret
rv32c_push_imm_clui:
    li t5, 0x800
    and t5, t6, t5
    slli t5, t5, 1
    li t0, 129023
    bgt t6, t0, rv32c_push_imm_lui
    li t0, -133120
    blt t6, t0, rv32c_push_imm_lui
    li t0, 0x3f000
    and t0, t6, t0
    add t0, t0, t5
    srli t1, t0, 10
    andi t2, t1, 0x80
    slli t2, t2, 5
    li t0, 0x6281
    or t0, t0, t1
    or t4, t0, t2 #t4: c.lui
    bnez t5, rv32c_push_imm_caddi_n
    j rv32c_push_imm_caddi
rv32c_push_imm_lui:
    li t0, 0xfffff000
    and t0, t6, t0
    add t0, t0, t5
    li t4, 0x2b7
    or t4, t0, t4 #t4: lui
    bnez t5, rv32c_push_imm_caddi_n
    j rv32c_push_imm_caddi
rv32c_push_imm_caddi: # t4: lui
    li t0, 0xfff
    and t0, t6, t0
    bnez t0, rv32c_push_imm_caddi_nz
    addi sp, sp, -12
    li t1, 3
    li t2, 0x1171
    li t3, 0xc016
    sw t1, 0(sp)
    sw t2, 4(sp) #addi sp, sp, -4
    sw t4, 8(sp) #lui t0, [nzimm]
    sw t3, 12(sp) #sw t0, 0(sp)
    ret
rv32c_push_imm_caddi_nz:
    li t1, 31
    bgt t0, t1, rv32c_push_imm_addi
    andi t1, t0, 0x1f
    andi t2, t0, 0x20
    slli t1, t1, 2
    slli t2, t2, 7
    li t0, 0x0281
    or t0, t0, t1
    or t5, t0, t2
    j rv32c_push_imm_addi_end
rv32c_push_imm_addi:
    li t1, 0x28293
    slli t0, t0, 20
    or t5, t0, t1
    j rv32c_push_imm_addi_end
rv32c_push_imm_caddi_n: # t4: lui
    li t1, 0x1000
    sub t0, t0, t1
    li t1, -32
    blt t0, t1, rv32c_push_imm_addi_n
    andi t1, t0, 0x1f
    andi t2, t0, 0x20
    slli t1, t1, 2
    slli t2, t2, 7
    li t0, 0x0281
    or t0, t0, t1
    or t5, t0, t2
    j rv32c_push_imm_addi_end
rv32c_push_imm_addi_n:
    li t1, 0xfff
    and t0, t0, t1
    li t1, 0x28293
    slli t0, t0, 20
    or t5, t0, t1
    j rv32c_push_imm_addi_end
rv32c_push_imm_addi_end: # t4: lui t5: addi
    li t0, 4
    li t1, 0x1171
    li t2, 0xc016
    addi sp, sp, -16
    sw t0, 0(sp)
    sw t1, 4(sp) #addi sp, sp, -4
    sw t4, 8(sp) #lui t0, [nzimm]
    sw t5, 12(sp) #addi t0, [nzimm]
    sw t2, 16(sp) #sw t0, 0(sp)
    ret
###;
    },

    {
        "name": "rv32c_jump",
        "immediate": false,
        "payload":
###
    j .
###;
    },

    {
        "name": "aligned",
        "immediate": false,
        "payload":
###
    lw t0, 0(sp)
    andi t1, t0, -4
    sltu t2, t1, t0
    slli t2, t2, 2
    add t1, t1, t2
    sw t1, 0(sp)
    ret
###;
    },

    {
        "name": "align",
        "immediate": false,
        "payload":
###
    addi tp, tp, -4
    sw ra, 0(tp)
    CALL_WORD word_here
    CALL_WORD word_aligned
    lw ra, 0(tp)
    addi tp, tp, 4
    lw t0, 0(sp)
    addi sp, sp, 4
    la t1, forth_here
    sw t0, 0(t1)
    ret
###;
    },

    {
        "name": "insn,",
        "immediate": false,
        "payload":
###
    lw t0, 0(sp)
    addi sp, sp, 4
    la t6, forth_here
    lw t5, 0(t6)
    sh t0, 0(t5)
    addi t5, t5, 2
    andi t1, t0, 3
    li t2, 3
    beq t1, t2, insn0x2c_32bit
    j insn0x2c_end
insn0x2c_32bit:
    srli t0, t0, 16
    sh t0, 0(t5)
    addi t5, t5, 2
    j insn0x2c_end
insn0x2c_end:
    sw t5, 0(t6)
    ret
###;
    },

    {
        "name": "c,",
        "immediate": false,
        "payload":
###
    lw t0, 0(sp)
    addi sp, sp, 4
    la t6, forth_here
    lw t5, 0(t6)
    sb t0, 0(t5)
    addi t5, t5, 1
    sw t5, 0(t6)
    ret
###;
    },

    {
        "name": ",",
        "immediate": false,
        "payload":
###
    lw t0, 0(sp)
    addi sp, sp, 4
    la t1, forth_here
    lw t2, 0(t1)
    sw t0, 0(t2)
    addi t2, t2, 4
    sw t2, 0(t1)
    ret
###;
    },

    {
        "name": "@",
        "immediate": false,
        "payload":
###
    lw t0, 0(sp)
    lw t0, 0(t0)
    sw t0, 0(sp)
    ret
###;
    },

    {
        "name": "!",
        "immediate": false,
        "payload":
###
    lw t0, 0(sp)
    lw t1, 4(sp)
    sw t1, 0(t0)
    addi sp, sp, 8
    ret
###;
    },

    {
        "name": ".",
        "immediate": false,
        "payload":
###
    addi sp, sp, -4
    la t0, forth_digits_buffer
    sw t0, 0(sp)
    addi tp, tp, -4
    sw ra, 0(tp)
    CALL_WORD word_n2str
    CALL_WORD word_type
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    },

    {
        "name": "cr",
        "immediate": false,
        "payload":
###
    li t0, 13
    li t1, 10
    addi sp, sp, -8
    sw t0, 0(sp)
    sw t1, 4(sp)
    addi tp, tp, -4
    sw ra, 0(tp)
    CALL_WORD word_emit
    CALL_WORD word_emit
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    },

    {
        "name": "type",
        "immediate": false,
        "payload":
###
# ( c-addr u -- )
    lw t1, 0(sp)
    beqz t1, type_len0
    lw t0, 4(sp)
    addi tp, tp, -4
    sw ra, 0(tp)
type_loop:
    lb t3, 0(t0)
    addi sp, sp, -12
    sw t0, 0(sp)
    sw t1, 4(sp)
    sw t2, 8(sp)
    addi sp, sp, -4
    sw t3, 0(sp)
    CALL_WORD word_emit
    lw t0, 0(sp)
    lw t1, 4(sp)
    lw t2, 8(sp)
    addi sp, sp, 12
    addi t1, t1, -1
    addi t0, t0, 1
    bnez t1, type_loop
    lw ra, 0(tp)
    addi tp, tp, 4
type_len0:
    addi sp, sp, 8
    ret
###;
    },

    {
        "name": "n2str",
        "immediate": false,
        "payload":
###
# ( n c-addr -- c-addr u )
    lw t0, 4(sp) // n
    lw t1, 0(sp) // c-addr
    bgez t0, n2str_non_negative
    li t2, '-'
    sb t2, 0(t1)
    addi t1, t1, 1
    addi t0, t0, -1
    xori t0, t0, -1
n2str_non_negative:
    li t2, 0
    la t3, forth_base
    lw t3, 0(t3)
n2str_loop_div: // t0: n t1: addr t2: len t3: base
    div t4, t0, t3
    rem t5, t0, t3
    addi t5, t5, 48
    slti t6, t5, 58
    addi t6, t6, -1
    andi t6, t6, 7
    add t5, t5, t6
    addi sp, sp, -4
    sw t5, 0(sp)
    addi t2, t2, 1
    mv t0, t4
    bnez t0, n2str_loop_div
n2str_loop_put:
    lw t3, 0(sp)
    sb t3, 0(t1)
    addi sp, sp, 4
    addi t2, t2, -1
    addi t1, t1, 1
    bnez t2, n2str_loop_put
    lw t4, 0(sp)
    lw t3, 4(sp)
    sub t1, t1, t4
    lw t0, 0(sp)
    sw t0, 4(sp)
    sw t1, 0(sp)
    ret
###;
    },

    {
        "name": "write_word_header",
        "immediate": false,
        "payload":
###
    addi tp, tp, -4
    sw ra, 0(tp)
    CALL_WORD word_align
    lw t0, 0(sp)
    lw t1, 4(sp)
    addi sp, sp, 4
    sw t0, 0(sp)
    la t6, forth_here
    lw t2, 0(t6)
    beqz t0, write_word_header_noname
write_word_header_loop:
    lb t3, 0(t1)
    sb t3, 0(t2)
    addi t0, t0, -1
    addi t1, t1, 1
    addi t2, t2, 1
    bgtz t0, write_word_header_loop
    sw t2, 0(t6)
    CALL_WORD word_align
write_word_header_noname:
    la t0, forth_dict
    lw t0, 0(t0)
    addi sp, sp, -4
    sw t0, 0(sp)
    CALL_WORD word_0x2c_
    CALL_WORD word_0x2c_
write_word_header_end:
    la t0, forth_here
    lw t0, 0(t0)
    addi t0, t0, -8
    li t1, 0x700000
    add t0, t0, t1
    addi sp, sp, -4
    sw t0, 0(sp)
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    },

    {
        "name": ":",
        "immediate": true,
        "payload":
###
    addi tp, tp, -4
    sw ra, 0(tp)
    CALL_WORD word_state
    lw t0, 0(sp)
    lw t1, 0(t0)
    addi sp, sp, 4
    bnez t1, _0x3a_inside_definition
    li t1, 1
    sw t1, 0(t0)
    CALL_WORD word_get_token
    lw t0, 0(sp)
    blez t0, _0x3a_name_empty
    CALL_WORD word_write_word_header
    lw t0, 0(sp)
    la t1, forth_dict_editing
    sw t0, 0(t1)
    addi sp, sp, 4
_0x3a_name_empty:
_0x3a_inside_definition:
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    },

    {
        "name": ";",
        "immediate": true,
        "payload":
###
    addi tp, tp, -4
    sw ra, 0(tp)
    la t0, forth_dict_editing
    lw t0, 0(t0)
    bgtz t0, _0x3b_named_word
    slli t0, t0, 1
    srli t0, t0, 1
    addi sp, sp, -4
    sw t0, 0(sp)
_0x3b_named_word:
    la t1, forth_dict
    sw t0, 0(t1)
    li t0, 0x8082 # ret
    addi sp, sp, -4
    sw t0, 0(sp)
    CALL_WORD word_insn0x2c_
    CALL_WORD word_align
    la t0, forth_state
    li t1, 0
    sw t1, 0(t0)
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    },

    {
        "name": "imm",
        "immediate": true,
        "payload":
###
    addi tp, tp, -4
    sw ra, 0(tp)
    lw t0, 0(sp)
    lw t1, 4(sp)
    addi sp, sp, -8
    sw t0, 0(sp)
    sw t1, 4(sp)
    CALL_WORD word_type
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    },

    {
        "name": "quit",
        "immediate": false,
        "payload":
###
# ( -- )
    la t0, forth_interpreter_input_buffer
    li t1, 256
    addi sp, sp, -12
    sw t0, 8(sp)
    sw t0, 4(sp)
    sw t1, 0(sp)
    addi tp, tp, -4
    sw ra, 0(tp)
    CALL_WORD word_accept
quit_loop:
    CALL_WORD word_get_token
    lw t1, 0(sp)
    blez t1, quit_end
    lw t0, 0(sp)
    lw t1, 4(sp)
    addi sp, sp, -8
    sw t0, 0(sp)
    sw t1, 4(sp)
    CALL_WORD word_find
    lw t0, 0(sp)
    bnez t0, quit_loop_is_word
    lw t1, 8(sp)
    sw t1, 0(sp)
    CALL_WORD word_0x3e_n
    lw t0, 8(sp)
    lw t1, 4(sp)
    lw t2, 0(sp)
    bne t0, t2, quit_unknown
# is number
    la t0, forth_state
    lw t0, 0(t0)
    bnez t0, quit_loop_compile_number
# push number
    addi sp, sp, 12
    lw t2, 4(sp)
    lw t3, 8(sp)
    sw t2, 0(sp)
    sw t3, 4(sp)
    sw t1, 8(sp)
    j quit_loop
quit_loop_compile_number:
    addi sp, sp, 12
    sw t1, 0(sp)
    CALL_WORD word_rv32c_push_imm
    lw t0, 0(sp)
    addi sp, sp, 4
    addi tp, tp, -4
    sw t0, 0(tp)
quit_loop_compile_number_loop:
    CALL_WORD word_insn0x2c_
    lw t0, 0(tp)
    addi t0, t0, -1
    sw t0, 0(tp)
    bgtz t0, quit_loop_compile_number_loop
    addi tp, tp, 4
    j quit_loop
quit_loop_is_word:
    la t0, forth_state
    lw t0, 0(t0)
    lw t1, 0(sp)
    bltz t1, quit_loop_immediate_word
    bnez t0, quit_loop_compile_word_call
    lw t0, 4(sp)
    lw t1, 16(sp)
    lw t2, 20(sp)
    addi sp, sp, 20
    sw t0, 0(sp)
    addi tp, tp, -8
    sw t1, 0(tp)
    sw t2, 4(tp)
    CALL_WORD word_execute
    lw t1, 0(tp)
    lw t2, 4(tp)
    addi tp, tp, 8
    addi sp, sp, -8
    sw t1, 0(sp)
    sw t2, 4(sp)
    j quit_loop
quit_loop_compile_word_call:
    CALL_WORD word_fuck
    j .
quit_loop_immediate_word:
    lw t0, 4(sp)
    addi sp, sp, 12
    sw t0, 0(sp)
    CALL_WORD word_execute
    j quit_loop
quit_end:
    addi sp, sp, 16
    la t0, forth_state
    lw t0, 0(t0)
    bnez t0, quit_end_compile
    addi sp, sp, -8
    la t0, forth_str_ok
    li t1, 3
    j quit_end_end
quit_end_compile:
    addi sp, sp, -8
    la t0, forth_str_compiled
    li t1, 9
    j quit_end_end
quit_end_end:
    sw t1, 0(sp)
    sw t0, 4(sp)
    CALL_WORD word_type
    CALL_WORD word_cr
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
quit_unknown:
    addi sp, sp, 8
    CALL_WORD word_type
    la t0, forth_str_unknown
    li t1, 31
    sw t1, 0(sp)
    sw t0, 4(sp)
    CALL_WORD word_type
    CALL_WORD word_cr
    la sp, addr_pst_top
    lw sp, 0(sp)
    lw ra, 0(tp)
    la tp, addr_rst_top
    lw tp, 0(tp)
    ret
###;
    },

    {
        "name": "get_token",
        "immediate": false,
        "payload":
###
# ( c-addr u -- c-addr1 u1 c-addr2 u2 )
    lw t0, 4(sp)
    lw t1, 0(sp)
    li t3, 32
get_token_discard_space:
    blez t1, get_token_len0
    lb t2, 0(t0)
    bne t2, t3, get_token_discard_space_end
    addi t0, t0, 1
    addi t1, t1, -1
    j get_token_discard_space
    # t2: char t0: addr t1: u
get_token_discard_space_end:
    addi sp, sp, -4
    sw t0, 0(sp)
    addi t0, t0, 1
    addi t1, t1, -1
get_token_loop:
    blez t1, get_token_end
    lb t2, 0(t0)
    beq t2, t3, get_token_end
    addi t0, t0, 1
    addi t1, t1, -1
    j get_token_loop
get_token_end:
    lw t3, 0(sp)
    sub t3, t0, t3
    addi sp, sp, -4
    sw t3, 0(sp)
    sw t1, 8(sp)
    sw t0, 12(sp)
    ret
get_token_len0:
    sw t1, 0(sp)
    sw t0, 4(sp)
    addi sp, sp, -8
    sw t1, 0(sp)
    sw t0, 4(sp)
    ret
###;
    },

    {
        "name": "find",
        "immediate": false,
        "payload":
###
# ( c-addr u -- c-addr 0 | xt 1 | xt -1 )
    lw t0, 4(sp)
    lw t1, 0(sp)
    la t2, forth_dict
    lw t2, 0(t2)
find_word_loop: // t0: c-addr t1: len t2: dict_addr
    lw t3, 4(t2)
    andi t3, t3, 255
    bne t1, t3, find_word_len_neq
    andi t4, t3, -4
    slt t5, t4, t3
    slli t5, t5, 2
    add t4, t4, t5
    sub t3, t2, t4
find_word_byte_loop:
    lb t4, 0(t0)
    lb t5, 0(t3)
    bne t4, t5, find_word_cmp_fail
    addi t1, t1, -1
    beqz t1, find_word_found
    addi t0, t0, 1
    addi t3, t3, 1
    j find_word_byte_loop
find_word_len_neq:
find_word_cmp_fail: // fetch next dict word
    lw t2, 0(t2)
    beqz t2, find_give_up
    lw t0, 4(sp)
    lw t1, 0(sp)
    j find_word_loop
find_give_up:
    li t0, 0
    sw t0, 0(sp)
    ret
find_word_found:
    sw t2, 4(sp)
    lw t0, 4(t2)
    sgtz t0, t0
    slli t0, t0, 1
    addi t0, t0, -1
    sw t0, 0(sp)
    ret
###;
    },

    {
        "name": "here",
        "immediate": false,
        "payload":
###
    la t0, forth_here
    lw t0, 0(t0)
    addi sp, sp, -4
    sw t0, 0(sp)
    ret
###;
    },

    {
        "name": ">n",
        "immediate": false,
        "payload":
###
# ( c-addr u -- n u )
    lw t0, 4(sp)
    lw t1, 0(sp)
    li t3, 0
    lb t4, 0(t0)
    li t2, '%'
    beq t4, t2, parse_n_base_is_2
    li t2, '#'
    beq t4, t2, parse_n_base_is_10
    li t2, '$'
    beq t4, t2, parse_n_base_is_16
    la t2, forth_base
    lw t2, 0(t2)
    j parse_n_check_sign
parse_n_base_is_2:
    li t2, 2
    j parse_n_base_found
parse_n_base_is_10:
    li t2, 10
    j parse_n_base_found
parse_n_base_is_16:
    li t2, 16
parse_n_base_found:
    addi t1, t1, -1
    blez t1, parse_n_fail
    addi t0, t0, 1
    lb t1, 0(t0)
parse_n_check_sign:
    li t5, '-'
    bne t4, t5, parse_n_positive
    li t5, -1
    addi t1, t1, -1
    blez t1, parse_n_fail
    addi t0, t0, 1
    lb t4, 0(t0)
    j parse_n_loop
parse_n_positive:
    li t5, 1
parse_n_loop: // t0: addr t1: len t2: base t3: n t4: char t5: sign
    li t6, 'z'
    bgt t4, t6, parse_n_fail
    li t6, 'a'
    blt t4, t6, parse_n_loop_below_a
    addi t4, t4, -87
    j parse_n_loop_check_digit
parse_n_loop_below_a:
    li t6, 'A'
    blt t4, t6, parse_n_loop_below_A
    addi t4, t4, -55
    j parse_n_loop_check_digit
parse_n_loop_below_A:
    li t6, '0'
    blt t4, t6, parse_n_fail
    addi t4, t4, -48
parse_n_loop_check_digit:
    bge t4, t2, parse_n_fail
    add t3, t3, t4
    addi t1, t1, -1
    blez t1, parse_n_result
    mul t3, t3, t2
    addi t0, t0, 1
    lb t4, 0(t0)
    j parse_n_loop
parse_n_result:
    mul t3, t3, t5
parse_n_fail:
    sw t3, 4(sp)
    lw t0, 0(sp)
    sub t0, t0, t1
    sw t0, 0(sp)
    ret
###;
    },

    {
        "name": "accept",
        "immediate": false,
        "payload":
###
# ( c-addr u -- u )
    la t0, UART0_FIFO_REG
    lw t2, 4(sp)
    lw t6, 0(sp)
accept_start: // t0: tx addr t2: c-addr t6: max bytes to read
    la t1, UART0_STATUS_REG
    lw t1, 0(t1)
    andi t1, t1, 1023
    beqz t1, accept_wait
accept_loop: // t0: rx addr t1: num bytes left in rx t2: c-addr
    lw t3, 0(t0)
    andi t3, t3, 255
    li t4, 127
    bgt t3, t4, accept_next_byte
    li t4, 32
    bge t3, t4, accept_printable
    li t4, 13
    beq t3, t4, accept_finish
    li t4, 8
    beq t3, t4, accept_backspace
    j accept_next_byte
accept_backspace:
    lw t4, 4(sp)
    beq t2, t4, accept_next_byte
    addi t2, t2, -1
    li t4, 0x1b
    sw t4, 0(t0)
    li t4, '['
    sw t4, 0(t0)
    li t4, '1'
    sw t4, 0(t0)
    li t4, 'D'
    sw t4, 0(t0)
    li t4, 0x1b
    sw t4, 0(t0)
    li t4, '['
    sw t4, 0(t0)
    li t4, 'J'
    sw t4, 0(t0)
    addi t6, t6, 1
    j accept_next_byte
accept_printable:
    sb t3, 0(t2)
    addi t2, t2, 1
    addi t6, t6, -1
    sw t3, 0(t0)
    blez t6, accept_finish
accept_next_byte:
    addi t1, t1, -1
    blez t1, accept_wait
    j accept_loop
accept_finish:
    lw t0, 4(sp)
    sub t1, t2, t0
    addi sp, sp, 4
    sw t1, 0(sp)
    addi sp, sp, -4
    li t0, 32
    sw t0, 0(sp)
    addi tp, tp, -4
    sw ra, 0(tp)
    CALL_WORD word_emit
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
accept_wait:
    li t4, 65536
accept_wait_loop:
    addi t4, t4, -1
    bgtz t4, accept_wait_loop
    j accept_start
###;
    },

    {
        "name": "state",
        "immediate": false,
        "payload":
###
    la t0, forth_state
    addi sp, sp, -4
    sw t0, 0(sp)
    ret
###;
    },

    {
        "name": "execute",
        "immediate": false,
        "payload":
###
    lw t0, 0(sp)
    addi sp, sp, 4
    addi tp, tp, -4
    sw ra, 0(tp)
    jalr ra, 8(t0)
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    },

    {
        "name": "str1",
        "immediate": false,
        "payload":
###
    la t0, str_test1
    la t1, 20
    addi sp, sp, -8
    sw t0, 4(sp)
    sw t1, 0(sp)
    ret
###;
    },

    {
        "name": "str2",
        "immediate": false,
        "payload":
###
    la t0, str_test2
    la t1, 4
    addi sp, sp, -8
    sw t0, 4(sp)
    sw t1, 0(sp)
    ret
###;
    },

    {
        "name": "str3",
        "immediate": false,
        "payload":
###
    la t0, str_test3
    la t1, 6
    addi sp, sp, -8
    sw t0, 4(sp)
    sw t1, 0(sp)
    ret
###;
    },

    {
        "name": "base",
        "immediate": false,
        "payload":
###
    la t0, forth_base
    addi sp, sp, -4
    sw t0, 0(sp)
    ret
###;
    },

    {
        "name": "emit",
        "immediate": false,
        "payload":
###
    la t0, UART0_FIFO_REG
    lw t1, 0(sp)
    addi sp, sp, 4
    sw t1, 0(t0)
    ret
###;
    },

    {
        "name": "bye",
        "immediate": false,
        "payload":
###
    addi sp, sp, -24
    li t0, 10
    sw t0, 20(sp)
    li t0, 13
    sw t0, 16(sp)
    li t0, '!'
    sw t0, 12(sp)
    li t0, 'e'
    sw t0, 8(sp)
    li t0, 'y'
    sw t0, 4(sp)
    li t0, 'b'
    sw t0, 0(sp)
    addi tp, tp, -4
    sw ra, 0(tp)
    CALL_WORD word_emit
    CALL_WORD word_emit
    CALL_WORD word_emit
    CALL_WORD word_emit
    lw ra, 0(tp)
    addi tp, tp, 4
    ret
###;
    }
]
